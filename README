//Christopher Bartz
//cyb01b
//CS4760 S02
//Project 6

syntax: ./oss <arguments>

arguments:
-l testfilename will specify a custom log filename.  Default is log.out.
-q # will set a custom quantum amount for incrementing the OSS clock each cycle.  Default is 100000.
-s # will set the number of concurrent slave processes.  Default is 18. 
-t # will set the total number of real seconds OSS will limit its run.  Default is 2.
-h 	 will print a help message.

Source with revision control is at https://github.com/chrisbartz/cs4760-p6

The project has most requirements working or at least attempted:

Both:
shared memory working
semaphores working
DEBUG and VERBOSE are both options for logging

Parent:
OSS forks multiple children at "randomized" times
OSS keeps a simulated clock
OSS allocates shared memory
OSS allocates memory
OSS utilizes a second change algorithm to manage memory requests
OSS invokes a routine to handle frame maintenance when the free frames fall below a threshold
OSS mainenance routine marks frames for replacement
OSS keeps track of dirty bits as well (requiring write back to disk)
OSS implements a page table with dirty bit and second chance bit
OSS limits overall system memory to 256K
OSS utilizes a bit array to keep track of allocated frames
OSS has a macro to specify the maximum number of processes as well as the default
OSS monitors memory requests from USER processes
OSS determines if memory requests result in a page fault (15 ms) or no page fault (10 ns) and increments time
**OSS has not implemented queueing for memory requests
OSS checks whether a process has permission on a frame (all frames are private to 1 process)
**OSS does not yet log process termination
**OSS does not yet log memory access time
OSS prints memory map at intervals < 1 sec
**OSS does not yet report statistics requested



Children:
USER maintains a memory limit of 32K for each instance 
USER processes request memory from OSS
USER processes suspend operation after a request
USER processes utilize semaphore for requests
USER processes generate memory references as an int byte address bounded by USER memory limit
**USER does not generate separate reads or write requests to memory
USER processes wait for a response from OSS
USER processes are self terminating based on # of requests


Others:
project is available in Github
makefile implemented
README implemented
Simulation ends with execution statistics including average turnaround time, average wait time, idle CPU time

There are a few example commands that work for this project

./oss 
./oss -l thisisastrangelogfilename.log
./oss -q 100001
./oss -s 5
./oss -t 5000
./oss -l notagreatcombo.log -q 1 -s 15 -t 5000

Last minute note:
I still run into resource issues on hoare when forking with a large number of concurrent slave processes (default 18), 
so my suggestion is to run oss with a switch that limits the number of concurrent slave processes to 5 by running the
following command:

./oss -s 5




